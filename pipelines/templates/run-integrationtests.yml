# Template helper to copy files and publish them as an artifact
# If we end up with multiple test dlls, copy the dlls to a test directory
# and update how the dlls are specified.
parameters:
  name: ''
  dll: ''
  source: ''

steps:
- powershell: |
    # Copy and rename Test.runsettings.template.json to Test.runsettings.json to be used as test config
    copy "$(Build.SourcesDirectory)\src\WinGet.RestSource.IntegrationTest\Test.runsettings.template.json" "${{ parameters.source }}\Test.runsettings.json"

    # Install Winget
    $ProgressPreference = 'SilentlyContinue'
    iwr https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx
    iwr https://github.com/microsoft/winget-cli/releases/download/v1.1.12653/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle -OutFile Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
    Add-AppxProvisionedPackage -Online -PackagePath .\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle -DependencyPackagePath .\Microsoft.VCLibs.x64.14.00.Desktop.appx -SkipLicense
    
    # Winget isn't immediately available after Add-AppxProvisionedPackage completes, loop until it's ready
    do {
      try {
        winget | Out-Null
        $ready = $true
      } catch {
        "Winget not yet available"
      }
    } while (!$ready)

    winget source add -n "winget-pkgs-restsource" -a https://azfun-pkgsrest-api-centus-test.azurewebsites.net/api/ -t "Microsoft.Rest"
  displayName: "Setup test pre-requisites"

- task: CopyFiles@2
  displayName: 'Copy Files: ${{ parameters.name }}'
  inputs:
    SourceFolder: ${{ parameters.source }}
    TargetFolder:  '$(build.artifactstagingdirectory)\${{ parameters.name }}'
    CleanTargetFolder: true
    OverWrite: true
  condition: succeeded()

- task: VSTest@2
  displayName: 'Run tests: ${{ parameters.name }}'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: ${{ parameters.dll }}
    searchFolder: '$(build.artifactstagingdirectory)\${{ parameters.name }}'
    codeCoverageEnabled: true
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    overrideTestrunParameters: '-CosmosAccountEndpoint "$(CosmosDbEmulator.Endpoint)"'
  condition: succeeded()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: WinGet.RestSource-${{ parameters.name }}'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(Agent.TempDirectory)\TestResults'
    ArtifactName: 'WinGet.RestSource-${{ parameters.name }}'
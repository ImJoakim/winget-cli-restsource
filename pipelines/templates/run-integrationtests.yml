# Template helper to run integration tests
# If we end up with multiple test dlls, copy the dlls to a test directory
# and update how the dlls are specified.
parameters:
  name: ''
  dll: ''
  testDirectory: ''

steps:
- task: DownloadGitHubRelease@0
  inputs:
    connection: Microsoft
    userRepository: microsoft\winget-cli
    defaultVersionType: 'latest'
    itemPattern: "+(Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle|*.xml)"
    downloadPath: '$(System.ArtifactsDirectory)'
  displayName: Download latest Winget release

- powershell: |
    $tempPath = [System.IO.Path]::GetTempPath()
    $XAMLPackagePathZip = "$($tempPath)\Microsoft.UI.Xaml.2.7.0.zip"
    $XAMLPackageSubDirectory = "$($tempPath)\Microsoft.UI.Xaml.2.7.0"

    Write-Host "Downloading XAML nuget package"
    Invoke-WebRequest 'https://www.nuget.org/api/v2/package/Microsoft.UI.Xaml/2.7.0' -OutFile $XAMLPackagePathZip

    Write-Host "Expanding nuget package"
    Expand-Archive -Path $XAMLPackagePathZip -Destination $XAMLPackageSubDirectory

    $OSArchitecture = (Get-WmiObject Win32_OperatingSystem).OSArchitecture
    $XAMLPackageAppxPath = ""

    Switch ($OSArchitecture)
    {
        "64-bit" { $XAMLPackageAppxPath = "$($XAMLPackageSubDirectory)\tools\AppX\x64\Release\Microsoft.UI.Xaml.2.7.appx" }
        "32-bit" { $XAMLPackageAppxPath = "$($XAMLPackageSubDirectory)\tools\AppX\x86\Release\Microsoft.UI.Xaml.2.7.appx" }
    }

    
    Add-AppxPackage -Path $XAMLPackageAppxPath
    Write-Host "Installed XAML Appx Package"
    # Copy and rename Test.runsettings.template.json to Test.runsettings.json to be used as test config
    copy "$(Build.SourcesDirectory)\src\WinGet.RestSource.IntegrationTest\Test.runsettings.template.json" "${{ parameters.testDirectory }}\Test.runsettings.json"

    # Get path to license file downloaded from GitHub
    $licensePath = @(dir "$(System.ArtifactsDirectory)\*License*.xml")[0].FullName
    $licensePath

    # Install Winget
    $ProgressPreference = 'SilentlyContinue'
    iwr https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx
    Add-AppxProvisionedPackage -Online -PackagePath "$(System.ArtifactsDirectory)\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle" -DependencyPackagePath .\Microsoft.VCLibs.x64.14.00.Desktop.appx -LicensePath $licensePath
    Add-AppxPackage "$(System.ArtifactsDirectory)\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"

    Write-Host "Installed winget."
  displayName: "Setup test pre-requisites"

- powershell: |
    & winget source add -n "winget-cli-restsource" -a "$(RestSourceUrl)" -t "Microsoft.Rest"
    Write-Host "Added Rest Source."

  displayName: "Rest source"

- task: DotNetCoreCLI@2
  displayName: 'Run tests: ${{ parameters.name }}'
  inputs:
    command: 'test'
    arguments: "--no-build -c Release"
    publishTestResults: true
    projects: '$(Build.SourcesDirectory)\src\WinGet.RestSource.IntegrationTest\*.csproj'
  env:
    RestSourceUrl: "$(RestSourceUrl)" #  variable set in pipeline settings
    